basePath: /
definitions:
  models.CartItem:
    properties:
      id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    required:
    - quantity
    type: object
  models.CreateProductRequest:
    properties:
      desc:
        type: string
      name:
        minLength: 3
        type: string
      price:
        type: number
    required:
    - desc
    - name
    - price
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    required:
    - desc
    - name
    - price
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для интернет-магазина на Go.
  title: Go E-commerce API
  version: "1.0"
paths:
  /api/cart:
    get:
      consumes:
      - application/json
      description: Возвращает список товаров, добавленных в корзину текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CartItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить товары из корзины
      tags:
      - cart
  /api/cart/add:
    post:
      consumes:
      - application/json
      description: Добавляет товар в корзину текущего пользователя
      parameters:
      - description: Данные товара
        in: body
        name: cart_item
        required: true
        schema:
          $ref: '#/definitions/models.CartItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Добавить товар в корзину
      tags:
      - cart
  /api/cart/remove/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет товар из корзины текущего пользователя по ID позиции
      parameters:
      - description: ID позиции в корзине
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить товар из корзины
      tags:
      - cart
  /api/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT-токен
      parameters:
      - description: Учетные данные
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Токен доступа
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Вход пользователя
      tags:
      - auth
  /api/products:
    get:
      consumes:
      - application/json
      description: Возвращает список всех товаров
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить список товаров
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Создание нового товара
      parameters:
      - description: Создать товар
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Создать новый товар
      tags:
      - products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление товара по заданному ID
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Удалить товар
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Возвращает товар по заданному ID
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить товар по ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Обновление существующего товара по ID
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      - description: Обновить товар
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновить товар
      tags:
      - products
  /api/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Регистрация пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
